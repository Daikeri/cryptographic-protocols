def find_gcd(a, b):
    print(f"Начинаем нахождение НОД для ({a}, {b})")
    while b != 0:
        print(f"НОД({a}, {b}) -> a = {b}, b = {a % b}")
        a, b = b, a % b
    print(f"Найден НОД: {a}")
    return a


def gcd(*numbers):
    """
    Находит НОД нескольких чисел.
    :param numbers: Перечень чисел.
    :return: НОД чисел.
    """
    from math import gcd as math_gcd
    from functools import reduce

    result = reduce(find_gcd, numbers)
    print(f"НОД чисел {numbers} равен {result}")
    return result


# Задание 13а: Дано НОД (a, b) = 24, найдите НОД (a, b, 16)
# Здесь и далее a, b, c - неизвестные числа, поэтому решение будет общим
print("Задание 13а:")
print("Поскольку НОД(a, b) = 24, то НОД(a, b, 16) будет НОД(24, 16).")
gcd_13a = gcd(24, 16)

# Задание 13б: Дано НОД (a, b, c) = 12, найдите НОД (a, b, c, 16)
print("\nЗадание 13б:")
print("Поскольку НОД(a, b, c) = 12, то НОД(a, b, c, 16) будет НОД(12, 16).")
gcd_13b = gcd(12, 16)

# Задание 13в: Найдите НОД (200, 180, и 450)
print("\nЗадание 13в:")
gcd_13c = gcd(200, 180, 450)

# Задание 13г: Найдите НОД (200, 180 450 610)
print("\nЗадание 13г:")
gcd_13d = gcd(200, 180, 450, 610)

# Задание 14а: Доказательство
print("Задание 14а: Для любого n, НОД(2n + 1, n) = 1 по определению.")

# Задание 14б: Конкретные случаи
print("\nЗадание 14б:")
print("НОД(201, 100):")
gcd_201_100 = gcd(201, 100)

print("\nНОД(81, 40):")
gcd_81_40 = gcd(81, 40)

print("\nНОД(501, 250):")
gcd_501_250 = gcd(501, 250)

# Задание 15а: Общий случай
print("Задание 15а: Обычно, НОД(3n + 1, 2n + 1) = 1 для любого целого неотрицательного n.")

# Задание 15б: Конкретные случаи
print("\nЗадание 15б: Конкретные случаи")
print("НОД(301, 201):")
gcd_301_201 = gcd(301, 201)

print("\nНОД(121, 81):")
gcd_121_81 = gcd(121, 81)